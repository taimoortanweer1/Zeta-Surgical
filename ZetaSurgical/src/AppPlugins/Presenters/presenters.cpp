#include "presenters.h"

#include <greenhousecontext.h>
#include <QQuickItem>
#include <QQuickWindow>
#include <QGuiApplication>

// AUTOGENERATED HEADERS, DONT REMOVE THIS LINE
#include "pointeditorpresenterimpl.h"
#include "cartpresenterimpl.h"
#include "planningpresenterimpl.h"
#include "patientsdatabaseimpl.h"
#include "popupspresenterimpl.h"
#include "loginpresenterimpl.h"
#include "guinavigationpresenterimpl.h"
#include "navigationpresenterimpl.h"
#include "segmentationpresenterimpl.h"
#include "positioningpresenterimpl.h"
#include "Keyboard/keyboardpresenterimpl.h"

Presenters::Presenters(QObject *parent)
    : QObject(parent)
    , ApplicationPluginInterface()
{
}

void Presenters::populateContext(GreenHouse::Context *context)
{
    // AUTOGENERATED IMPLEMENTATIONS, DONT REMOVE THIS LINE
    auto popupsPresenter = new PopupsPresenterImpl;
    auto pointEditor = new PointEditorPresenterImpl(popupsPresenter);
    auto guinavigationPresenter = new GUINavigationPresenterImpl;
    auto navigationPresenter = new NavigationPresenterImpl(guinavigationPresenter);
    auto positioningPresenter = new PositioningPresenterImpl(guinavigationPresenter);
    auto segmentationPresenter = new SegmentationPresenterImpl(guinavigationPresenter);

    QQuickWindow *window = nullptr;
    auto const rootItem = context->contextRootItem();
    if(rootItem) {
        window = rootItem->window();
        bool frameless = true;
        if(QGuiApplication::arguments().contains(QStringLiteral("show-window-frame")))
            frameless = false;
        window->setFlag(Qt::FramelessWindowHint, frameless);
    }

    context->store(new CartPresenterImpl);
    context->store(pointEditor);
    context->store(popupsPresenter);
    context->store(positioningPresenter);
    context->store(guinavigationPresenter);
    context->store(navigationPresenter);
    context->store(segmentationPresenter);
    context->store(new PlanningPresenterImpl(popupsPresenter, pointEditor, guinavigationPresenter));
    context->store(new LoginPresenterImpl(popupsPresenter));
    context->store(new KeyboardPresenterImpl(window));
    context->store(new PatientsDatabaseImpl(popupsPresenter, guinavigationPresenter));
}

void Presenters::resolveDependencies(GreenHouse::Context *)
{
    // NOTE: This is where you can query the context for dependencies
    // SampleObject *sample = context->get<SampleObject>();
}
