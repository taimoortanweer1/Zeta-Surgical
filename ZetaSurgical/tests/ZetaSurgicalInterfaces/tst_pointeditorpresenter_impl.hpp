//--------------------------------------------------------------------------------------------------
// Generated using GreenHouse Modeling Library v 1.6.15
// From: ZetaSurgical PointEditorPresenter Interface
// Please do not edit this file as it will be overwritten the next time the application flow is
// regenerated.
//--------------------------------------------------------------------------------------------------
#pragma once

#include <limits>

#include <QCoreApplication>

#include <gtest/gtest.h>
#include <gmock/gmock-matchers.h>

#include <QJsonDocument>

#include <applicationpluginmanager.h>

#include <ZetaSurgical/pointeditorpresenter.hpp>

using namespace testing;

class PointEditorPresenterImplTestRpc : public GreenHouse::RPCServiceInterface
{
public:
    using GreenHouse::RPCServiceInterface::RPCServiceInterface;

    QList<QJsonObject> messages;

    // GreenHouse::RPCServiceInterface interface
protected:
    void sendPayload(const QByteArray &data) override
    {
        QJsonParseError err;
        QJsonDocument doc = QJsonDocument::fromJson(data, &err);
        if (err.error == QJsonParseError::NoError) {
            messages.append(doc.object());
        }
    }
};

class PointEditorPresenterInterfaceImplTest : public Test
{
    // Test interface
protected:
    void SetUp();
    void TearDown();

    ZetaSurgical::PointEditorPresenter *iface;
    ApplicationPluginManager *m_applicationPluginManager;
    PointEditorPresenterImplTestRpc *m_rpc;
    GreenHouse::Context m_ctx;
};

void PointEditorPresenterInterfaceImplTest ::SetUp()
{
    m_rpc = new PointEditorPresenterImplTestRpc(&m_ctx);
    QDir pluginDir;
    pluginDir = QDir(qApp->applicationDirPath());
    pluginDir.cdUp();
    pluginDir.cdUp();
    pluginDir.cd(QStringLiteral("plugins"));
    m_applicationPluginManager = new ApplicationPluginManager(pluginDir.absoluteFilePath(QStringLiteral("config.json")),
                                                              pluginDir.absolutePath());
    if (m_applicationPluginManager)
        m_applicationPluginManager->inject(&m_ctx);
    iface = m_ctx.get<ZetaSurgical::PointEditorPresenter>();
    if (!iface) {
        iface = new ZetaSurgical::PointEditorPresenter;
        m_ctx.store(iface);
    }
    m_ctx.startExecution();
}

void PointEditorPresenterInterfaceImplTest ::TearDown()
{
    delete m_applicationPluginManager;
}

TEST_F(PointEditorPresenterInterfaceImplTest, onNorthButtonClicked)
{

    iface->onNorthButtonClicked();
}

TEST_F(PointEditorPresenterInterfaceImplTest, onSouthButtonClicked)
{

    iface->onSouthButtonClicked();
}

TEST_F(PointEditorPresenterInterfaceImplTest, onWestButtonClicked)
{

    iface->onWestButtonClicked();
}

TEST_F(PointEditorPresenterInterfaceImplTest, onEastButtonClicked)
{

    iface->onEastButtonClicked();
}

TEST_F(PointEditorPresenterInterfaceImplTest, onAddPointClicked)
{

    iface->onAddPointClicked();
}

TEST_F(PointEditorPresenterInterfaceImplTest, xString_Imp)
{
    auto oldValue = iface->xString();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::xStringChanged, [&]() { changeSignalEmitted = true; });

    iface->setXString(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->xString(), oldValue);
    ASSERT_EQ(iface->xString(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, yString_Imp)
{
    auto oldValue = iface->yString();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::yStringChanged, [&]() { changeSignalEmitted = true; });

    iface->setYString(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->yString(), oldValue);
    ASSERT_EQ(iface->yString(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, zString_Imp)
{
    auto oldValue = iface->zString();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::zStringChanged, [&]() { changeSignalEmitted = true; });

    iface->setZString(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->zString(), oldValue);
    ASSERT_EQ(iface->zString(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, northButtonCaption_Imp)
{
    auto oldValue = iface->northButtonCaption();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::northButtonCaptionChanged,
                     [&]() { changeSignalEmitted = true; });

    iface->setNorthButtonCaption(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->northButtonCaption(), oldValue);
    ASSERT_EQ(iface->northButtonCaption(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, southButtonCaption_Imp)
{
    auto oldValue = iface->southButtonCaption();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::southButtonCaptionChanged,
                     [&]() { changeSignalEmitted = true; });

    iface->setSouthButtonCaption(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->southButtonCaption(), oldValue);
    ASSERT_EQ(iface->southButtonCaption(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, westButtonCaption_Imp)
{
    auto oldValue = iface->westButtonCaption();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::westButtonCaptionChanged,
                     [&]() { changeSignalEmitted = true; });

    iface->setWestButtonCaption(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->westButtonCaption(), oldValue);
    ASSERT_EQ(iface->westButtonCaption(), newValue);
}

TEST_F(PointEditorPresenterInterfaceImplTest, eastButtonCaption_Imp)
{
    auto oldValue = iface->eastButtonCaption();
    auto newValue = QStringLiteral("Lorem Ipsum Test STR");

    bool changeSignalEmitted = false;
    QObject::connect(iface, &ZetaSurgical::PointEditorPresenter::eastButtonCaptionChanged,
                     [&]() { changeSignalEmitted = true; });

    iface->setEastButtonCaption(newValue);
    ASSERT_TRUE(changeSignalEmitted);
    ASSERT_NE(iface->eastButtonCaption(), oldValue);
    ASSERT_EQ(iface->eastButtonCaption(), newValue);
}
